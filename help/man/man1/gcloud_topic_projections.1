
.TH "GCLOUD_TOPIC_PROJECTIONS" 1



.SH "NAME"
.HP
gcloud topic projections \- resource projections supplementary help



.SH "DESCRIPTION"

Most \fBgcloud\fR commands return a list of resources on success. By default
they are pretty\-printed on the standard output. The
\fB\-\-format=\fR\fINAME\fR[\fIATTRIBUTES\fR]\fB(\fR\fIPROJECTION\fR\fB)\fR flag
changes the default output:

\fINAME\fR
.RS 2m
The format name.
.RE
\fIATTRIBUTES\fR
.RS 2m
Format specific attributes. For details run $ gcloud topic formats.
.RE
\fIPROJECTION\fR
.RS 2m
A list of resource keys that selects the data listed. Resource projections are
described in detail below.
.RE
\fIresource keys\fR
.RS 2m
Keys are names for resource resource items. For details run $ gcloud topic
resource\-keys. Most \fBgcloud\fR \fBlist\fR commands have a
\fB\-\-filter=\fR\fIEXPRESSION\fR flag that selects resources to be listed. For
details run $ gcloud topic filters.


.RE

.SH "Projections"

A projection is a list of keys that selects resource data values. Projections
are used in \fB\-\-format\fR flag expressions. For example, the \fBtable\fR
format requires a projection that describes the table columns:

.RS 2m
table(name, network.ip.internal, network.ip.external, uri())
.RE


.SH "Transforms"

A \fBtransform\fR formats resource data values. Each projection key may have
zero or more transform calls:

.RS 2m
_key_._transform_([arg...])...
.RE

This example applies the \fBfoo\fR() and then the \fBbar\fR() transform to the
\fBstatus.time\fR resource value:

.RS 2m
(name, status.time.foo().bar())
.RE


The builtin transform functions are:

\fBalways\fR()
.RS 2m
Marks a transform sequence to always be applied. In some cases transforms are
disabled. Prepending always() to a transform sequence causes the sequence to
always be evaluated.

For example\f5:\fR
.RS 2m
some_field.always().foo().bar() will always apply foo() and then bar().

.RE
.RE
\fBbasename\fR(undefined="")
.RS 2m
Returns the last path component.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource or basename is empty.

.RE
.RE
\fBcollection\fR(undefined="")
.RS 2m
Returns the current resource collection.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
This value is returned if r or the collection is empty.

.RE
.RE
\fBcolor\fR(red, yellow, green, blue)
.RS 2m
Colorizes the resource string value. The resource string is searched for an RE
pattern match in Roy.G.Biv order. The first pattern that matches colorizes the
resource string with that color.


The arguments are:

\fB\f5red\fR\fR
.RS 2m
Color red resource value pattern.
.RE
\fB\f5yellow\fR\fR
.RS 2m
Color yellow resource value pattern.
.RE
\fB\f5green\fR\fR
.RS 2m
Color green resource value pattern.
.RE
\fB\f5blue\fR\fR
.RS 2m
Color blue resource value pattern.

.RE
.RE
\fBdate\fR(format="%Y\-%m\-%dT%H:%M:%S", unit=1, undefined="", tz)
.RS 2m
Formats the resource as a strftime() format.


The arguments are:

\fB\f5format\fR\fR
.RS 2m
The strftime(3) format.
.RE
\fB\f5unit\fR\fR
.RS 2m
If the resource is a Timestamp then divide by \fIunit\fR to yield seconds.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource is not a valid time.
.RE
\fB\f5tz\fR\fR
.RS 2m
Fixed timezone string, local timezone if not specified. For example, EST5EDT,
US/Pacific, UTC, WEST.

.RE
.RE
\fBduration\fR(unit=1, undefined="")
.RS 2m
Formats the resource as a duration string.


The arguments are:

\fB\f5unit\fR\fR
.RS 2m
Divide the resource numeric value by \fIunit\fR to yield seconds.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource is not a valid timestamp.

.RE
.RE
\fBerror\fR(message)
.RS 2m
Raises an Error exception that does not generate a stack trace.


The arguments are:

\fB\f5message\fR\fR
.RS 2m
An error message. If not specified then the resource is formatted as the error
message.

.RE
.RE
\fBfatal\fR(message)
.RS 2m
Raises an InternalError exception that generates a stack trace.


The arguments are:

\fB\f5message\fR\fR
.RS 2m
An error message. If not specified then the resource is formatted as the error
message.

.RE
.RE
\fBfirstof\fR(args)
.RS 2m
Returns the first non\-empty .name attribute value for name in args.


The arguments are:

\fB\f5args\fR\fR
.RS 2m
Names to check for resource attribute values,

.RE
For example\f5:\fR
.RS 2m
x.firstof(bar_foo, barFoo, BarFoo, BAR_FOO) will check x.bar_foo, x.barFoo,
x.BarFoo, and x.BAR_FOO in order for the first non\-empty value.

.RE
.RE
\fBfloat\fR(precision=6, spec)
.RS 2m
Returns the string representation of a floating point number. One of these
formats is used (1) ". \fIprecision\fR \fIspec\fR" if \fIspec\fR is specified
(2) ". \fIprecision\fR" unless 1e\-04 <= abs(number) < 1e+09 (3) ".1f"
otherwise.


The arguments are:

\fB\f5precision\fR\fR
.RS 2m
The maximum number of digits before and after the decimal point.
.RE
\fB\f5spec\fR\fR
.RS 2m
The printf(3) floating point format "e", "f" or "g" spec character.

.RE
.RE
\fBformat\fR(fmt, args)
.RS 2m
Formats resource key values.


The arguments are:

\fB\f5fmt\fR\fR
.RS 2m
The format string with {0} ... {nargs\-1} references to the resource attribute
name arg values.
.RE
\fB\f5args\fR\fR
.RS 2m
The resource attribute key expression to format. The printer projection symbols
and aliases may be used in key expressions.

.RE
For example\f5:\fR
.RS 2m
\-\-format='value(format("{0:f.1}/{0:f.1}", q.CPU.default, q.CPU.limit))'

.RE
.RE
\fBgroup\fR(args)
.RS 2m
Formats a [...] grouped list. Each group is enclosed in [...]. The first item
separator is ':', subsequent separators are ','. [item1] [item1] ... [item1:
item2] ... [item1: item2] [item1: item2, item3] ... [item1: item2, item3]


The arguments are:

\fB\f5args\fR\fR
.RS 2m
Optional attribute names to select from the list. Otherwise the string value of
each list item is selected.

.RE
.RE
\fBiso\fR(undefined="T")
.RS 2m
Formats the resource to numeric ISO time format.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource does not have an isoformat() attribute.

.RE
.RE
\fBlen\fR()
.RS 2m
Returns the length of the resource if it is non\-empty, 0 otherwise.

.RE
\fBlist\fR(undefined="", separator=",")
.RS 2m
Formats a dict or list into a compact comma separated list.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Return this if the resource is empty.
.RE
\fB\f5separator\fR\fR
.RS 2m
The list item separator string.

.RE
.RE
\fBmap\fR()
.RS 2m
Applies the next transform in the sequence to each resource list item.

For example\f5:\fR
.RS 2m
list_field.map().foo().bar() applies foo() to each item in list_field and then
bar() to the resulting value. list_field.map().foo().map().bar() applies foo()
to each item in list_field and then bar() to each item in the resulting list.

.RE
.RE
\fBresolution\fR(undefined="", transpose=False)
.RS 2m
Formats a human readable XY resolution.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if a recognizable resolution was not found.
.RE
\fB\f5transpose\fR\fR
.RS 2m
Returns the y/x resolution if True.

.RE
.RE
\fBscope\fR(args)
.RS 2m
Gets the /args/ suffix from a URI.


The arguments are:

\fB\f5args\fR\fR
.RS 2m
Optional URI segment names. If not specified then 'regions', 'zones' is assumed.

.RE
For example\f5:\fR
.RS 2m
"https://abc/foo/projects/bar/xyz".scope("projects") returns "bar/xyz".
"https://xyz/foo/regions/abc".scope() returns "abc".

.RE
.RE
\fBsegment\fR(index=\-1, undefined="")
.RS 2m
Returns the index\-th URI path segment.


The arguments are:

\fB\f5index\fR\fR
.RS 2m
The path segment index to return counting from 0.
.RE
\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource or segment index is empty.

.RE
.RE
\fBsize\fR(zero="0", units_in, units_out, min=0)
.RS 2m
Formats a human readable size in bytes.


The arguments are:

\fB\f5zero\fR\fR
.RS 2m
Returns this value if size==0. Ignored if not specified.
.RE
\fB\f5units_in\fR\fR
.RS 2m
A unit suffix (only the first character is checked) or unit size. The size is
multiplied by this. The default is 1.0.
.RE
\fB\f5units_out\fR\fR
.RS 2m
A unit suffix (only the first character is checked) or unit size. The size is
divided by this. The default is 1.0.
.RE
\fB\f5min\fR\fR
.RS 2m
Sizes < \fImin\fR will be listed as "< \fImin\fR".

.RE
.RE
\fBuri\fR(undefined=".")
.RS 2m
Gets the resource URI.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this if a the URI for r cannot be determined.

.RE
.RE
\fByesno\fR(yes, no="No")
.RS 2m
Returns no if the resource is empty, yes or the resource itself otherwise.


The arguments are:

\fB\f5yes\fR\fR
.RS 2m
If the resource is not empty then returns \fIyes\fR or the resource itself if
\fIyes\fR is not defined.
.RE
\fB\f5no\fR\fR
.RS 2m
Returns this value if the resource is empty.


.RE
.RE
The compute transform functions are:

\fBfirewall_rule\fR(undefined="")
.RS 2m
Returns a compact string describing a firewall rule. The compact string is a
comma\-separated list of PROTOCOL:PORT_RANGE items. If a particular protocol has
no port ranges then only the protocol is listed.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource cannot be formatted.

.RE
.RE
\fBimage_alias\fR(undefined="")
.RS 2m
Returns a comma\-separated list of alias names for an image.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource cannot be formatted.

.RE
.RE
\fBnext_maintenance\fR(undefined="")
.RS 2m
Returns the timestamps of the next scheduled maintenance. All timestamps are
assumed to be ISO strings in the same timezone.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource cannot be formatted.

.RE
.RE
\fBoperation_http_status\fR(undefined="")
.RS 2m
Returns the HTTP response code of an operation.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if there is no response code.

.RE
.RE
\fBquota\fR(undefined="")
.RS 2m
Formats a quota as usage/limit.


The arguments are:

\fB\f5undefined\fR\fR
.RS 2m
Returns this value if the resource cannot be formatted.

.RE
.RE
\fBstatus\fR(undefined="")
.RS 2m
Returns the machine status with deprecation information if applicable.


The arguments are:

\fB``\f5undefined``\fI\fR
.RS 2m
Returns this value if the resource cannot be formatted.



\fR
.RE
.RE

.SH "Key Attributes"

Key attributes control formatted output. Each projection key may have zero or
more attributes:

.RS 2m
_key_:_attribute_=_value_...
.RE

where =\fIvalue\fR is omitted for Boolean attributes and no\-\fIattribute\fR
sets the attribute to false. Attribute values may appear in any order, but must
be specified after any transform calls. The attributes are:

\fBalias\fR=\fIALIAS\-NAME\fR
.RS 2m
Sets \fIALIAS\-NAME\fR as an alias for the projection key.

.RE
\fBalign\fR=\fIALIGNMENT\fR
.RS 2m
Specifies the output column data alignment. Used by the \fBtable\fR format. The
alignment values are:

\fBleft\fR
.RS 2m
Left (default).

.RE
\fBcenter\fR
.RS 2m
Center.

.RE
\fBright\fR
.RS 2m
Right.

.RE
.RE
\fBlabel\fR=\fILABEL\fR
.RS 2m
A string value used to label output. Use :label="" or :label=\fI\f5 for no
label. The \fBtable\fR format uses \fRLABEL\fI values as column headings. Also
sets \fRLABEL\fI as an alias for the projection key. The default label is the
the disambiguated right hand parts of the column key name in ANGRY_SNAKE_CASE.

.RE
[no\-]\fBreverse\fR
.RS 2m
Sets the key sort order to descending. \fBno\-reverse\fR resets to the default
ascending order.

.RE
\fBsort\fR=\fRSORT\-ORDER\fI
.RS 2m
An integer counting from 1. Keys with lower sort\-order are sorted first. Keys
with same sort order are sorted left to right.


\fR
.RE

.SH "EXAMPLES"

List a table of instance \fBzone\fR (sorted in descending order) and \fBname\fR
(sorted by \fBname\fR and centered with column heading \fBINSTANCE\fR) and
\fBcreationTimestamp\fR (listed using the \fBstrftime\fR(3) year\-month\-day
format with column heading \fBSTART\fR):

.RS 2m
$ gcloud compute instances list \e
    \-\-format='table(name:sort=2:align=center:label=INSTANCE,
 zone:sort=1:reverse,
 creationTimestamp.date("%Y\-%m\-%d"):label=START)'
.RE

List only the \fBname\fR, \fBstatus\fR and \fBzone\fR instance resource keys in
YAML format:

.RS 2m
$ gcloud compute instances list \-\-format='yaml(name, status, zone)'
.RE

List only the \fBconfig.account\fR key value(s) in the \fBinfo\fR resource:

.RS 2m
$ gcloud info \-\-format='value(config.account)'
.RE
